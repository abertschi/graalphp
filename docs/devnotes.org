## -*- coding: utf-8;mode: org; fill-column: 80;  -*-
## This file is best viewed with GNU Emacs Org-mode: http://orgmode.org/

* Parsing
** DONE Add error listener
CLOSED: [2020-05-02 Sat 21:51]
** DONE Add support for PHP 7.4
CLOSED: [2020-05-02 Sat 21:49]
** DONE Add CI and compare against upstream
CLOSED: [2020-05-02 Sat 21:50]
** TODO Add Benchmarks
 - https://github.com/abertschi/graalphp/issues/12
** TODO Add support for PHP 5 - 7.3
** TODO Remove IBindings from codebase
* Graal
** TODO TCL test compatibility kit is not enabled

* Truffle
** TODO Find out if using with int instead of long can increase performance
** TODO Unclear when to use @TruffleBoundary annotation
** TODO Decide if we create source section while parsing or lazy loading
- pro for eager: we may implement phpdoc semantics into parsing (types)
- however, new versions of php support type hints and dont have to rely on comments
- i think for now we lazy load source section with index and lengh and fetch when needed.
** TODO find out how to run global stmts: create artificial main function or keep list of stmts
** TODO Implement proper overflow behavior according to Spec
** TODO we currently only support long numbers
If we overflow we can either follow spec and convert number into float or use
big integer exact size of int is undefined (4 or 8 bytes), and conversion to
float leads to rounding errors big integer may be more suitable, however, it is
slower.
** TODO continuation of non fatal errors
If either operand does not have type int, its value is first converted to that type. If either or both operands were leading-numeric or non-numeric strings, a non-fatal error MUST be produced for each.

*** Integer
**** TODO make PHP_INT_SIZE, PHP_INT_MIN and PHP_INT_MAX available as constants
**** TODO isInt library function
** TODO unclear DirectCallNode vs RootCallTarget
We currently use RootCallTarget for functions
** TODO do we need to make framedescriptor frame of global scope materialized?
As soon as a frame is stored in a java object, (a virtual frame), it needs to materialize.
This is useful if we want to model lexical scope where functions can access scope of caller.
But php does not support this so we dont need to pass the parent frame around (unless
we implement the reference operator).

See this example of mumber project. function need access to frame of parent function.
this is why the frame is stored and must be materialzed beforehand.
A materialized frame can escape compilation unit and is thus slower than a virtual frame.

#+begin_src java
@Specialization
    public Object getMumblerFunction(VirtualFrame virtualFrame) {
        MumblerFunction function = this.getFunction();
        if (!isScopeSet()) {
            CompilerDirectives.transferToInterpreterAndInvalidate();
            function.setLexicalScope(virtualFrame.materialize());
            this.scopeSet = true;
        }
        return function;
    }
#+end_src    
** TODO How can we pass a var arg of exprNodes to a node which uses NodeChild(args)
and is abstract?
** Do we need to add a class to the typesystem of truffle in order to use it in @NodeChild?
#+begin_src java
abstract class ExpressionNode extends Node {
    abstract Object execute(VirtualFrame frame);
}

@NodeChild @NodeChild
abstract class ArrayReadNode extends ExpressionNode {

    @Specialization
    int doBuffer(BufferArray array, int index) {
        return array.buffer[index];
    }

    @Specialization
    int doSequence(SequenceArray seq, int index) {
        return seq.start + seq.stride * index;
    }
}
#+end_src
- nodechild are of type node, which are executed
- does their value need to be added to typesystem?

* Optimizations
** TODO See if specialisation for shift instead of div by 2 brings performance
** TODO Optimize Function invocation
- currently no optimiations done
- we can;
  - make phpfunction a phpType
  - change invokeNode such that it has phpfunction and arguments as children
  - make object[] a new type known to phptypes
  - introduce executeValues node which has children and executes them all and returns obj[]

See Oz Project:
#+begin_src 
public class ExecuteValuesNode extends OzNode {

	@Children final OzNode[] valuesNodes;

	public ExecuteValuesNode(OzNode[] valuesNodes) {
		this.valuesNodes = valuesNodes;
	}

	@Override
	public Object[] execute(VirtualFrame frame) {
		return NodeHelpers.executeValues(frame, valuesNodes);
	}

}
#+end_src
** TODO specializations to avoid boxing
** TODO inline caches before function invocation
** TODO tail Call optimizations
** TODO branch profiling
** TODO loop unrolling
** TODO ensure finals in nodes
** TODO Array Copy by Value
- we currently copy arrays by value
- for function returns it may make sense to return reference instead.
* Testing/ CI
* Doc
** TODO update list of implemented features to facebook spec
* Language
** TODO Break and Continue accept an expression
currently no need to support this
** TODO Conditional Functions
which are only active once execution flow reaches that part
** What happens to arrays if they are passed by value
* Design Noes
** Integer
- implemented as java long type
- Literals written using hexadecimal, octal, or binary notations are considered to have non-negative values.
  (https://github.com/php/php-langspec/blob/master/spec/09-lexical-structure.md#literals)

*** Integer overflows
Spec says:
#+begin_quote
The range of values that can be stored is implementation-defined; however, the range [-2147483648, 2147483647], must be supported. This range must be finite.

Certain operations on integer values produce a mathematical result that cannot be represented as an integer. Examples include the following:

    Incrementing the largest value or decrementing the smallest value.
    Applying the unary minus to the smallest value.
    Multiplying, adding, or subtracting two values.

In such cases, the computation is done as though the types of the values were float with the result having that type.

#+end_quote

Size of integer is implementation dependent. Alternatively to converting to a float representation,
we can could big integer, this solves imprecision issues but decreases performance.
** Float
- float type :: https://github.com/php/php-langspec/blob/master/spec/05-types.md#the-floating-point-type

*** Float + Int
https://github.com/php/php-langspec/blob/master/spec/08-conversions.md#converting-to-floating-point-type

If either or both operands were leading-numeric or non-numeric strings, a
non-fatal error MUST be produced for each. Then if either operand has type
float, the other is converted to that type, and the result has type float

*** TODO Convert float to int
#+begin_src 
Psy Shell v0.9.12 (PHP 7.4.6 â€” cli) by Justin Hileman
=> 6
>>> (int) 5.99999999999999959 + 1
=> 7
>>> (int) 5.99999999999999955 +
#+end_src

* Remaining Features
** Benchmarks to use
- binarytrees.php-1.php (bintree)
- fannkuchredux.php-1.php (fannk)  
** TODO access argv array (fannk)
** TODO Introduce strings
- implement printf (fannk)
** TODO Implement Arrays
- Implement 1D arrays with integer (fannk)
  - array(val1, val) (fannk)
  - list(name1, name2) = array (fannk)
** TODO Implement Classes
- New operator (bintree)
- public attributes  bintree)
  
